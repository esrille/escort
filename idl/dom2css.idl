/*
 * dom2css.idl
 *
 * DOM Level 2 CSS IDL definitions, rewritten in Web IDL.
 *
 * Original OMG IDL:
 *
 *   http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/css.idl
 */

module css {

  typedef dom::Document Document;
  typedef dom::Element Element;
  typedef dom::DOMImplementation DOMImplementation;
  typedef dom::DOMException DOMException;

  // Introduced in DOM Level 2:
  interface CSSCharsetRule : CSSRule {
             attribute DOMString        encoding setraises(DOMException);

  };

  // Introduced in DOM Level 2:
  interface CSSUnknownRule : CSSRule {
  };


  // Introduced in DOM Level 2:
  interface CSSValue {

    // UnitTypes
    const unsigned short      CSS_INHERIT                    = 0;
    const unsigned short      CSS_PRIMITIVE_VALUE            = 1;
    const unsigned short      CSS_VALUE_LIST                 = 2;
    const unsigned short      CSS_CUSTOM                     = 3;

             attribute DOMString        cssText;
                                        // raises(DOMException) on setting

    readonly attribute unsigned short   cssValueType;
  };

  // Introduced in DOM Level 2:
  interface CSSPrimitiveValue : CSSValue {

    // UnitTypes
    const unsigned short      CSS_UNKNOWN                    = 0;
    const unsigned short      CSS_NUMBER                     = 1;
    const unsigned short      CSS_PERCENTAGE                 = 2;
    const unsigned short      CSS_EMS                        = 3;
    const unsigned short      CSS_EXS                        = 4;
    const unsigned short      CSS_PX                         = 5;
    const unsigned short      CSS_CM                         = 6;
    const unsigned short      CSS_MM                         = 7;
    const unsigned short      CSS_IN                         = 8;
    const unsigned short      CSS_PT                         = 9;
    const unsigned short      CSS_PC                         = 10;
    const unsigned short      CSS_DEG                        = 11;
    const unsigned short      CSS_RAD                        = 12;
    const unsigned short      CSS_GRAD                       = 13;
    const unsigned short      CSS_MS                         = 14;
    const unsigned short      CSS_S                          = 15;
    const unsigned short      CSS_HZ                         = 16;
    const unsigned short      CSS_KHZ                        = 17;
    const unsigned short      CSS_DIMENSION                  = 18;
    const unsigned short      CSS_STRING                     = 19;
    const unsigned short      CSS_URI                        = 20;
    const unsigned short      CSS_IDENT                      = 21;
    const unsigned short      CSS_ATTR                       = 22;
    const unsigned short      CSS_COUNTER                    = 23;
    const unsigned short      CSS_RECT                       = 24;
    const unsigned short      CSS_RGBCOLOR                   = 25;

    // From Media Queries and CSS Values and Units Module
    const unsigned short      CSS_DPPX                       = 30;   // TBD
    const unsigned short      CSS_DPI                        = 31;   // TBD
    const unsigned short      CSS_DPCM                       = 32;   // TBD

    const unsigned short      CSS_UNICODE_RANGE              = 102;  // TBD

    readonly attribute unsigned short   primitiveType;
    void               setFloatValue(in unsigned short unitType,
                                     in float floatValue)
                                        raises(DOMException);
    float              getFloatValue(in unsigned short unitType)
                                        raises(DOMException);
    void               setStringValue(in unsigned short stringType,
                                      in DOMString stringValue)
                                        raises(DOMException);
    DOMString          getStringValue()
                                        raises(DOMException);
    Counter            getCounterValue()
                                        raises(DOMException);
    Rect               getRectValue()
                                        raises(DOMException);
    RGBColor           getRGBColorValue()
                                        raises(DOMException);
  };

  // Introduced in DOM Level 2:
  interface CSSValueList : CSSValue {
    readonly attribute unsigned long length;
    getter CSSValue item(in unsigned long index);
  };

  // Introduced in DOM Level 2:
  interface RGBColor {
    readonly attribute CSSPrimitiveValue  red;
    readonly attribute CSSPrimitiveValue  green;
    readonly attribute CSSPrimitiveValue  blue;
  };

  // Introduced in DOM Level 2:
  interface Rect {
    readonly attribute CSSPrimitiveValue  top;
    readonly attribute CSSPrimitiveValue  right;
    readonly attribute CSSPrimitiveValue  bottom;
    readonly attribute CSSPrimitiveValue  left;
  };

  // Introduced in DOM Level 2:
  interface Counter {
    readonly attribute DOMString        identifier;
    readonly attribute DOMString        listStyle;
    readonly attribute DOMString        separator;
  };

  // Introduced in DOM Level 2:
  interface CSS2Properties {
    attribute DOMString? azimuth;
    attribute DOMString? background;
    attribute DOMString? backgroundAttachment;
    attribute DOMString? backgroundColor;
    attribute DOMString? backgroundImage;
    attribute DOMString? backgroundPosition;
    attribute DOMString? backgroundRepeat;
    attribute DOMString? border;
    attribute DOMString? borderCollapse;
    attribute DOMString? borderColor;
    attribute DOMString? borderSpacing;
    attribute DOMString? borderStyle;
    attribute DOMString? borderTop;
    attribute DOMString? borderRight;
    attribute DOMString? borderBottom;
    attribute DOMString? borderLeft;
    attribute DOMString? borderTopColor;
    attribute DOMString? borderRightColor;
    attribute DOMString? borderBottomColor;
    attribute DOMString? borderLeftColor;
    attribute DOMString? borderTopStyle;
    attribute DOMString? borderRightStyle;
    attribute DOMString? borderBottomStyle;
    attribute DOMString? borderLeftStyle;
    attribute DOMString? borderTopWidth;
    attribute DOMString? borderRightWidth;
    attribute DOMString? borderBottomWidth;
    attribute DOMString? borderLeftWidth;
    attribute DOMString? borderWidth;
    attribute DOMString? bottom;
    attribute DOMString? captionSide;
    attribute DOMString? clear;
    attribute DOMString? clip;
    attribute DOMString? color;
    attribute DOMString? content;
    attribute DOMString? counterIncrement;
    attribute DOMString? counterReset;
    attribute DOMString? cue;
    attribute DOMString? cueAfter;
    attribute DOMString? cueBefore;
    attribute DOMString? cursor;
    attribute DOMString? direction;
    attribute DOMString? display;
    attribute DOMString? elevation;
    attribute DOMString? emptyCells;
    attribute DOMString? cssFloat;
    attribute DOMString? font;
    attribute DOMString? fontFamily;
    attribute DOMString? fontSize;
    attribute DOMString? fontSizeAdjust;
    attribute DOMString? fontStretch;
    attribute DOMString? fontStyle;
    attribute DOMString? fontVariant;
    attribute DOMString? fontWeight;
    attribute DOMString? height;
    attribute DOMString? left;
    attribute DOMString? letterSpacing;
    attribute DOMString? lineHeight;
    attribute DOMString? listStyle;
    attribute DOMString? listStyleImage;
    attribute DOMString? listStylePosition;
    attribute DOMString? listStyleType;
    attribute DOMString? margin;
    attribute DOMString? marginTop;
    attribute DOMString? marginRight;
    attribute DOMString? marginBottom;
    attribute DOMString? marginLeft;
    attribute DOMString? markerOffset;
    attribute DOMString? marks;
    attribute DOMString? maxHeight;
    attribute DOMString? maxWidth;
    attribute DOMString? minHeight;
    attribute DOMString? minWidth;
    attribute DOMString? orphans;
    attribute DOMString? outline;
    attribute DOMString? outlineColor;
    attribute DOMString? outlineStyle;
    attribute DOMString? outlineWidth;
    attribute DOMString? overflow;
    attribute DOMString? padding;
    attribute DOMString? paddingTop;
    attribute DOMString? paddingRight;
    attribute DOMString? paddingBottom;
    attribute DOMString? paddingLeft;
    attribute DOMString? page;
    attribute DOMString? pageBreakAfter;
    attribute DOMString? pageBreakBefore;
    attribute DOMString? pageBreakInside;
    attribute DOMString? pause;
    attribute DOMString? pauseAfter;
    attribute DOMString? pauseBefore;
    attribute DOMString? pitch;
    attribute DOMString? pitchRange;
    attribute DOMString? playDuring;
    attribute DOMString? position;
    attribute DOMString? quotes;
    attribute DOMString? richness;
    attribute DOMString? right;
    attribute DOMString? size;
    attribute DOMString? speak;
    attribute DOMString? speakHeader;
    attribute DOMString? speakNumeral;
    attribute DOMString? speakPunctuation;
    attribute DOMString? speechRate;
    attribute DOMString? stress;
    attribute DOMString? tableLayout;
    attribute DOMString? textAlign;
    attribute DOMString? textDecoration;
    attribute DOMString? textIndent;
    attribute DOMString? textShadow;
    attribute DOMString? textTransform;
    attribute DOMString? top;
    attribute DOMString? unicodeBidi;
    attribute DOMString? verticalAlign;
    attribute DOMString? visibility;
    attribute DOMString? voiceFamily;
    attribute DOMString? volume;
    attribute DOMString? whiteSpace;
    attribute DOMString? widows;
    attribute DOMString? width;
    attribute DOMString? wordSpacing;
    attribute DOMString? zIndex;
  };

  CSSStyleDeclaration implements CSS2Properties;

/* Obsoleted by CSSOM
  // Introduced in DOM Level 2:
  interface ViewCSS {
    CSSStyleDeclaration getComputedStyle(in Element elt,
                                         in DOMString? pseudoElt);
  };

  AbstractView implements ViewCSS;
 */

  // Introduced in DOM Level 2:
  interface DocumentCSS /*: stylesheets::DocumentStyle*/ {
    CSSStyleDeclaration getOverrideStyle(in Element elt,
                                         in DOMString? pseudoElt);
  };

  Document implements DocumentCSS;

  // Introduced in DOM   Level 2:
  interface DOMImplementationCSS /*: DOMImplementation*/ {
    CSSStyleSheet      createCSSStyleSheet(in DOMString title,
                                           in DOMString media)
                                        raises(DOMException);
  };

  DOMImplementation implements DOMImplementationCSS;
};
