/*
 * cssom.idl
 *
 * CSS Object Model (CSSOM)
 *
 * Original Editor's Draft 28 October 2012:
 *
 *   http://dev.w3.org/csswg/cssom/
 */

module stylesheets {

typedef dom::Node Node;
typedef dom::Document Document;
typedef dom::Element Element;
typedef dom::ProcessingInstruction ProcessingInstruction;
typedef dom::DOMException DOMException;
typedef html::Window Window;
typedef html::DOMStringList DOMStringList;

[Constructor(DOMString text)]
interface MediaList {
    stringifier attribute DOMString mediaText;
    readonly attribute unsigned long length;
    DOMString item (unsigned long index);
    void appendMedium (DOMString medium);
    void deleteMedium (DOMString medium);
};

interface StyleSheet {
    readonly attribute DOMString type;
    readonly attribute DOMString? href;
    readonly attribute Node ownerNode;
    readonly attribute StyleSheet? parentStyleSheet;
    readonly attribute DOMString? title;
    readonly attribute MediaList media;
    attribute boolean disabled;
};

typedef StyleSheet[] StyleSheetList;

};

module css {

typedef stylesheets::StyleSheet StyleSheet;

interface CSSStyleSheet : StyleSheet {
    readonly attribute CSSRule? ownerRule;
    readonly attribute CSSRuleList cssRules;
    unsigned long insertRule (DOMString rule, unsigned long index);
    void deleteRule (unsigned long index);
};

};

module dom {

typedef stylesheets::StyleSheetList StyleSheetList;

partial interface Document {
    readonly attribute StyleSheetList styleSheets;
    attribute DOMString? selectedStyleSheetSet;
    readonly attribute DOMString? lastStyleSheetSet;
    readonly attribute DOMString? preferredStyleSheetSet;
    readonly attribute DOMStringList styleSheetSets;
    void enableStyleSheetsForSet (DOMString? name);
};

};

module stylesheets {

[NoInterfaceObject]
interface LinkStyle {
    readonly attribute StyleSheet sheet;
};

};

module css {

typedef stylesheets::MediaList MediaList;

[ArrayClass]
interface CSSRuleList {
  getter CSSRule? item(unsigned long index);
  readonly attribute unsigned long length;
};

interface CSSRule {
    const unsigned short STYLE_RULE = 1;
    const unsigned short CHARSET_RULE = 2;
    const unsigned short IMPORT_RULE = 3;
    const unsigned short MEDIA_RULE = 4;
    const unsigned short FONT_FACE_RULE = 5;
    const unsigned short PAGE_RULE = 6;
    const unsigned short NAMESPACE_RULE = 10;
    readonly attribute unsigned short type;
    attribute DOMString cssText;
    readonly attribute CSSRule? parentRule;
    readonly attribute CSSStyleSheet? parentStyleSheet;
};

interface CSSStyleRule : CSSRule {
    attribute DOMString selectorText;
    readonly attribute CSSStyleDeclaration style;
};

interface CSSImportRule : CSSRule {
    readonly attribute DOMString href;
    readonly attribute MediaList media;
    readonly attribute CSSStyleSheet styleSheet;
};

interface CSSMediaRule : CSSRule {
    readonly attribute MediaList media;
    readonly attribute CSSRuleList cssRules;
    unsigned long insertRule (DOMString rule, unsigned long index);
    void deleteRule (unsigned long index);
};

interface CSSFontFaceRule : CSSRule {
    readonly attribute CSSStyleDeclaration style;
};

interface CSSPageRule : CSSRule {
    attribute DOMString selectorText;
    readonly attribute CSSStyleDeclaration style;
};

interface CSSNamespaceRule : CSSRule {
    readonly attribute DOMString namespaceURI;
    readonly attribute DOMString? prefix;
};

interface CSSStyleDeclaration {
    attribute DOMString cssText;
    readonly attribute unsigned long length;
    DOMString item (unsigned long index);
    DOMString getPropertyValue (DOMString property);
    DOMString getPropertyPriority (DOMString property);
    void setProperty (DOMString property, DOMString value, optional DOMString priority);
    DOMString removeProperty (DOMString property);
    readonly attribute CSSRule? parentRule;
};

[NoInterfaceObject]
interface ElementCSSInlineStyle {
    readonly attribute CSSStyleDeclaration style;
};
Element implements ElementCSSInlineStyle;

};

module html {

partial interface Window {
    CSSStyleDeclaration getComputedStyle (Element elt);
    CSSStyleDeclaration getComputedStyle (Element elt, DOMString pseudoElt);
};

};
