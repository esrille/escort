// Generated by esidl 0.3.0.
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#include "XMLHttpRequestImp.h"

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{

events::EventHandlerNonNull XMLHttpRequestImp::getOnreadystatechange()
{
    // TODO: implement me!
    return nullptr;
}

void XMLHttpRequestImp::setOnreadystatechange(events::EventHandlerNonNull onreadystatechange)
{
    // TODO: implement me!
}

unsigned short XMLHttpRequestImp::getReadyState()
{
    // TODO: implement me!
    return 0;
}

void XMLHttpRequestImp::open(const std::u16string& method, const std::u16string& url)
{
    // TODO: implement me!
}

void XMLHttpRequestImp::open(const std::u16string& method, const std::u16string& url, bool async)
{
    // TODO: implement me!
}

void XMLHttpRequestImp::open(const std::u16string& method, const std::u16string& url, bool async, const Nullable<std::u16string>& user)
{
    // TODO: implement me!
}

void XMLHttpRequestImp::open(const std::u16string& method, const std::u16string& url, bool async, const Nullable<std::u16string>& user, const Nullable<std::u16string>& password)
{
    // TODO: implement me!
}

void XMLHttpRequestImp::setRequestHeader(const std::u16string& header, const std::u16string& value)
{
    // TODO: implement me!
}

unsigned int XMLHttpRequestImp::getTimeout()
{
    // TODO: implement me!
    return 0;
}

void XMLHttpRequestImp::setTimeout(unsigned int timeout)
{
    // TODO: implement me!
}

bool XMLHttpRequestImp::getWithCredentials()
{
    // TODO: implement me!
    return 0;
}

void XMLHttpRequestImp::setWithCredentials(bool withCredentials)
{
    // TODO: implement me!
}

XMLHttpRequestUpload XMLHttpRequestImp::getUpload()
{
    // TODO: implement me!
    return nullptr;
}

void XMLHttpRequestImp::send()
{
    // TODO: implement me!
}

void XMLHttpRequestImp::send(Any data)
{
    // TODO: implement me!
}

void XMLHttpRequestImp::abort()
{
    // TODO: implement me!
}

unsigned short XMLHttpRequestImp::getStatus()
{
    // TODO: implement me!
    return 0;
}

std::u16string XMLHttpRequestImp::getStatusText()
{
    // TODO: implement me!
    return u"";
}

Nullable<std::u16string> XMLHttpRequestImp::getResponseHeader(const std::u16string& header)
{
    // TODO: implement me!
    return u"";
}

std::u16string XMLHttpRequestImp::getAllResponseHeaders()
{
    // TODO: implement me!
    return u"";
}

void XMLHttpRequestImp::overrideMimeType(const std::u16string& mime)
{
    // TODO: implement me!
}

XMLHttpRequestResponseType XMLHttpRequestImp::getResponseType()
{
    // TODO: implement me!
    return 0;
}

void XMLHttpRequestImp::setResponseType(XMLHttpRequestResponseType responseType)
{
    // TODO: implement me!
}

Any XMLHttpRequestImp::getResponse()
{
    // TODO: implement me!
    return 0;
}

std::u16string XMLHttpRequestImp::getResponseText()
{
    // TODO: implement me!
    return u"";
}

Document XMLHttpRequestImp::getResponseXML()
{
    // TODO: implement me!
    return nullptr;
}

}
}
}
}
