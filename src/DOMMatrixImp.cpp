// Generated by esidl 0.4.0.
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#include "DOMMatrixImp.h"

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{

double DOMMatrixImp::getA()
{
    // TODO: implement me!
    return 0;
}

void DOMMatrixImp::setA(double a)
{
    // TODO: implement me!
}

double DOMMatrixImp::getB()
{
    // TODO: implement me!
    return 0;
}

void DOMMatrixImp::setB(double b)
{
    // TODO: implement me!
}

double DOMMatrixImp::getC()
{
    // TODO: implement me!
    return 0;
}

void DOMMatrixImp::setC(double c)
{
    // TODO: implement me!
}

double DOMMatrixImp::getD()
{
    // TODO: implement me!
    return 0;
}

void DOMMatrixImp::setD(double d)
{
    // TODO: implement me!
}

double DOMMatrixImp::getE()
{
    // TODO: implement me!
    return 0;
}

void DOMMatrixImp::setE(double e)
{
    // TODO: implement me!
}

double DOMMatrixImp::getF()
{
    // TODO: implement me!
    return 0;
}

void DOMMatrixImp::setF(double f)
{
    // TODO: implement me!
}

double DOMMatrixImp::getM11()
{
    // TODO: implement me!
    return 0;
}

void DOMMatrixImp::setM11(double m11)
{
    // TODO: implement me!
}

double DOMMatrixImp::getM12()
{
    // TODO: implement me!
    return 0;
}

void DOMMatrixImp::setM12(double m12)
{
    // TODO: implement me!
}

double DOMMatrixImp::getM13()
{
    // TODO: implement me!
    return 0;
}

void DOMMatrixImp::setM13(double m13)
{
    // TODO: implement me!
}

double DOMMatrixImp::getM14()
{
    // TODO: implement me!
    return 0;
}

void DOMMatrixImp::setM14(double m14)
{
    // TODO: implement me!
}

double DOMMatrixImp::getM21()
{
    // TODO: implement me!
    return 0;
}

void DOMMatrixImp::setM21(double m21)
{
    // TODO: implement me!
}

double DOMMatrixImp::getM22()
{
    // TODO: implement me!
    return 0;
}

void DOMMatrixImp::setM22(double m22)
{
    // TODO: implement me!
}

double DOMMatrixImp::getM23()
{
    // TODO: implement me!
    return 0;
}

void DOMMatrixImp::setM23(double m23)
{
    // TODO: implement me!
}

double DOMMatrixImp::getM24()
{
    // TODO: implement me!
    return 0;
}

void DOMMatrixImp::setM24(double m24)
{
    // TODO: implement me!
}

double DOMMatrixImp::getM31()
{
    // TODO: implement me!
    return 0;
}

void DOMMatrixImp::setM31(double m31)
{
    // TODO: implement me!
}

double DOMMatrixImp::getM32()
{
    // TODO: implement me!
    return 0;
}

void DOMMatrixImp::setM32(double m32)
{
    // TODO: implement me!
}

double DOMMatrixImp::getM33()
{
    // TODO: implement me!
    return 0;
}

void DOMMatrixImp::setM33(double m33)
{
    // TODO: implement me!
}

double DOMMatrixImp::getM34()
{
    // TODO: implement me!
    return 0;
}

void DOMMatrixImp::setM34(double m34)
{
    // TODO: implement me!
}

double DOMMatrixImp::getM41()
{
    // TODO: implement me!
    return 0;
}

void DOMMatrixImp::setM41(double m41)
{
    // TODO: implement me!
}

double DOMMatrixImp::getM42()
{
    // TODO: implement me!
    return 0;
}

void DOMMatrixImp::setM42(double m42)
{
    // TODO: implement me!
}

double DOMMatrixImp::getM43()
{
    // TODO: implement me!
    return 0;
}

void DOMMatrixImp::setM43(double m43)
{
    // TODO: implement me!
}

double DOMMatrixImp::getM44()
{
    // TODO: implement me!
    return 0;
}

void DOMMatrixImp::setM44(double m44)
{
    // TODO: implement me!
}

void DOMMatrixImp::multiplyBy(DOMMatrix other)
{
    // TODO: implement me!
}

void DOMMatrixImp::preMultiplyBy(DOMMatrix other)
{
    // TODO: implement me!
}

void DOMMatrixImp::translateBy(double tx, double ty)
{
    // TODO: implement me!
}

void DOMMatrixImp::translateBy(double tx, double ty, double tz)
{
    // TODO: implement me!
}

void DOMMatrixImp::scaleBy(double scale)
{
    // TODO: implement me!
}

void DOMMatrixImp::scaleBy(double scale, double originX)
{
    // TODO: implement me!
}

void DOMMatrixImp::scaleBy(double scale, double originX, double originY)
{
    // TODO: implement me!
}

void DOMMatrixImp::scale3dBy(double scale)
{
    // TODO: implement me!
}

void DOMMatrixImp::scale3dBy(double scale, double originX)
{
    // TODO: implement me!
}

void DOMMatrixImp::scale3dBy(double scale, double originX, double originY)
{
    // TODO: implement me!
}

void DOMMatrixImp::scale3dBy(double scale, double originX, double originY, double originZ)
{
    // TODO: implement me!
}

void DOMMatrixImp::scaleNonUniformBy(double scaleX)
{
    // TODO: implement me!
}

void DOMMatrixImp::scaleNonUniformBy(double scaleX, double scaleY)
{
    // TODO: implement me!
}

void DOMMatrixImp::scaleNonUniformBy(double scaleX, double scaleY, double scaleZ)
{
    // TODO: implement me!
}

void DOMMatrixImp::scaleNonUniformBy(double scaleX, double scaleY, double scaleZ, double originX)
{
    // TODO: implement me!
}

void DOMMatrixImp::scaleNonUniformBy(double scaleX, double scaleY, double scaleZ, double originX, double originY)
{
    // TODO: implement me!
}

void DOMMatrixImp::scaleNonUniformBy(double scaleX, double scaleY, double scaleZ, double originX, double originY, double originZ)
{
    // TODO: implement me!
}

void DOMMatrixImp::rotateBy(double angle)
{
    // TODO: implement me!
}

void DOMMatrixImp::rotateBy(double angle, double originX)
{
    // TODO: implement me!
}

void DOMMatrixImp::rotateBy(double angle, double originX, double originY)
{
    // TODO: implement me!
}

void DOMMatrixImp::rotateFromVectorBy(double x, double y)
{
    // TODO: implement me!
}

void DOMMatrixImp::rotateAxisAngleBy(double x, double y, double z, double angle)
{
    // TODO: implement me!
}

void DOMMatrixImp::skewXBy(double sx)
{
    // TODO: implement me!
}

void DOMMatrixImp::skewYBy(double sy)
{
    // TODO: implement me!
}

void DOMMatrixImp::invert()
{
    // TODO: implement me!
}

}
}
}
}
