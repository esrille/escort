// Generated by esidl 0.3.0.
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#include "RangeImp.h"

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{

Node RangeImp::getStartContainer()
{
    // TODO: implement me!
    return nullptr;
}

unsigned int RangeImp::getStartOffset()
{
    // TODO: implement me!
    return 0;
}

Node RangeImp::getEndContainer()
{
    // TODO: implement me!
    return nullptr;
}

unsigned int RangeImp::getEndOffset()
{
    // TODO: implement me!
    return 0;
}

bool RangeImp::getCollapsed()
{
    // TODO: implement me!
    return 0;
}

Node RangeImp::getCommonAncestorContainer()
{
    // TODO: implement me!
    return nullptr;
}

void RangeImp::setStart(Node refNode, unsigned int offset)
{
    // TODO: implement me!
}

void RangeImp::setEnd(Node refNode, unsigned int offset)
{
    // TODO: implement me!
}

void RangeImp::setStartBefore(Node refNode)
{
    // TODO: implement me!
}

void RangeImp::setStartAfter(Node refNode)
{
    // TODO: implement me!
}

void RangeImp::setEndBefore(Node refNode)
{
    // TODO: implement me!
}

void RangeImp::setEndAfter(Node refNode)
{
    // TODO: implement me!
}

void RangeImp::collapse(bool toStart)
{
    // TODO: implement me!
}

void RangeImp::selectNode(Node refNode)
{
    // TODO: implement me!
}

void RangeImp::selectNodeContents(Node refNode)
{
    // TODO: implement me!
}

short RangeImp::compareBoundaryPoints(unsigned short how, ranges::Range sourceRange)
{
    // TODO: implement me!
    return 0;
}

void RangeImp::deleteContents()
{
    // TODO: implement me!
}

DocumentFragment RangeImp::extractContents()
{
    // TODO: implement me!
    return nullptr;
}

DocumentFragment RangeImp::cloneContents()
{
    // TODO: implement me!
    return nullptr;
}

void RangeImp::insertNode(Node node)
{
    // TODO: implement me!
}

void RangeImp::surroundContents(Node newParent)
{
    // TODO: implement me!
}

ranges::Range RangeImp::cloneRange()
{
    // TODO: implement me!
    return nullptr;
}

void RangeImp::detach()
{
    // TODO: implement me!
}

bool RangeImp::isPointInRange(Node node, unsigned int offset)
{
    // TODO: implement me!
    return 0;
}

short RangeImp::comparePoint(Node node, unsigned int offset)
{
    // TODO: implement me!
    return 0;
}

bool RangeImp::intersectsNode(Node node)
{
    // TODO: implement me!
    return 0;
}

std::u16string RangeImp::toString()
{
    // TODO: implement me!
    return u"";
}

DocumentFragment RangeImp::createContextualFragment(const std::u16string& fragment)
{
    // TODO: implement me!
    return nullptr;
}

DOMRectList RangeImp::getClientRects()
{
    // TODO: implement me!
    return nullptr;
}

DOMRect RangeImp::getBoundingClientRect()
{
    // TODO: implement me!
    return nullptr;
}

}
}
}
}
