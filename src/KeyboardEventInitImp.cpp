// Generated by esidl 0.3.0.
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#include "KeyboardEventInitImp.h"

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{

bool KeyboardEventInitImp::getBubbles()
{
    // TODO: implement me!
    return 0;
}

void KeyboardEventInitImp::setBubbles(bool bubbles)
{
    // TODO: implement me!
}

bool KeyboardEventInitImp::getCancelable()
{
    // TODO: implement me!
    return 0;
}

void KeyboardEventInitImp::setCancelable(bool cancelable)
{
    // TODO: implement me!
}

html::Window KeyboardEventInitImp::getView()
{
    // TODO: implement me!
    return nullptr;
}

void KeyboardEventInitImp::setView(html::Window view)
{
    // TODO: implement me!
}

int KeyboardEventInitImp::getDetail()
{
    // TODO: implement me!
    return 0;
}

void KeyboardEventInitImp::setDetail(int detail)
{
    // TODO: implement me!
}

std::u16string KeyboardEventInitImp::getChar()
{
    // TODO: implement me!
    return u"";
}

void KeyboardEventInitImp::setChar(const std::u16string& _char)
{
    // TODO: implement me!
}

std::u16string KeyboardEventInitImp::getKey()
{
    // TODO: implement me!
    return u"";
}

void KeyboardEventInitImp::setKey(const std::u16string& key)
{
    // TODO: implement me!
}

unsigned int KeyboardEventInitImp::getLocation()
{
    // TODO: implement me!
    return 0;
}

void KeyboardEventInitImp::setLocation(unsigned int location)
{
    // TODO: implement me!
}

bool KeyboardEventInitImp::getCtrlKey()
{
    // TODO: implement me!
    return 0;
}

void KeyboardEventInitImp::setCtrlKey(bool ctrlKey)
{
    // TODO: implement me!
}

bool KeyboardEventInitImp::getShiftKey()
{
    // TODO: implement me!
    return 0;
}

void KeyboardEventInitImp::setShiftKey(bool shiftKey)
{
    // TODO: implement me!
}

bool KeyboardEventInitImp::getAltKey()
{
    // TODO: implement me!
    return 0;
}

void KeyboardEventInitImp::setAltKey(bool altKey)
{
    // TODO: implement me!
}

bool KeyboardEventInitImp::getMetaKey()
{
    // TODO: implement me!
    return 0;
}

void KeyboardEventInitImp::setMetaKey(bool metaKey)
{
    // TODO: implement me!
}

bool KeyboardEventInitImp::getRepeat()
{
    // TODO: implement me!
    return 0;
}

void KeyboardEventInitImp::setRepeat(bool repeat)
{
    // TODO: implement me!
}

std::u16string KeyboardEventInitImp::getLocale()
{
    // TODO: implement me!
    return u"";
}

void KeyboardEventInitImp::setLocale(const std::u16string& locale)
{
    // TODO: implement me!
}

unsigned int KeyboardEventInitImp::getCharCode()
{
    // TODO: implement me!
    return 0;
}

void KeyboardEventInitImp::setCharCode(unsigned int charCode)
{
    // TODO: implement me!
}

unsigned int KeyboardEventInitImp::getKeyCode()
{
    // TODO: implement me!
    return 0;
}

void KeyboardEventInitImp::setKeyCode(unsigned int keyCode)
{
    // TODO: implement me!
}

unsigned int KeyboardEventInitImp::getWhich()
{
    // TODO: implement me!
    return 0;
}

void KeyboardEventInitImp::setWhich(unsigned int which)
{
    // TODO: implement me!
}

}
}
}
}
