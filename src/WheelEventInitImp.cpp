// Generated by esidl 0.3.0.
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#include "WheelEventInitImp.h"

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{

bool WheelEventInitImp::getBubbles()
{
    // TODO: implement me!
    return 0;
}

void WheelEventInitImp::setBubbles(bool bubbles)
{
    // TODO: implement me!
}

bool WheelEventInitImp::getCancelable()
{
    // TODO: implement me!
    return 0;
}

void WheelEventInitImp::setCancelable(bool cancelable)
{
    // TODO: implement me!
}

html::Window WheelEventInitImp::getView()
{
    // TODO: implement me!
    return nullptr;
}

void WheelEventInitImp::setView(html::Window view)
{
    // TODO: implement me!
}

int WheelEventInitImp::getDetail()
{
    // TODO: implement me!
    return 0;
}

void WheelEventInitImp::setDetail(int detail)
{
    // TODO: implement me!
}

int WheelEventInitImp::getScreenX()
{
    // TODO: implement me!
    return 0;
}

void WheelEventInitImp::setScreenX(int screenX)
{
    // TODO: implement me!
}

int WheelEventInitImp::getScreenY()
{
    // TODO: implement me!
    return 0;
}

void WheelEventInitImp::setScreenY(int screenY)
{
    // TODO: implement me!
}

int WheelEventInitImp::getClientX()
{
    // TODO: implement me!
    return 0;
}

void WheelEventInitImp::setClientX(int clientX)
{
    // TODO: implement me!
}

int WheelEventInitImp::getClientY()
{
    // TODO: implement me!
    return 0;
}

void WheelEventInitImp::setClientY(int clientY)
{
    // TODO: implement me!
}

bool WheelEventInitImp::getCtrlKey()
{
    // TODO: implement me!
    return 0;
}

void WheelEventInitImp::setCtrlKey(bool ctrlKey)
{
    // TODO: implement me!
}

bool WheelEventInitImp::getShiftKey()
{
    // TODO: implement me!
    return 0;
}

void WheelEventInitImp::setShiftKey(bool shiftKey)
{
    // TODO: implement me!
}

bool WheelEventInitImp::getAltKey()
{
    // TODO: implement me!
    return 0;
}

void WheelEventInitImp::setAltKey(bool altKey)
{
    // TODO: implement me!
}

bool WheelEventInitImp::getMetaKey()
{
    // TODO: implement me!
    return 0;
}

void WheelEventInitImp::setMetaKey(bool metaKey)
{
    // TODO: implement me!
}

unsigned short WheelEventInitImp::getButton()
{
    // TODO: implement me!
    return 0;
}

void WheelEventInitImp::setButton(unsigned short button)
{
    // TODO: implement me!
}

unsigned short WheelEventInitImp::getButtons()
{
    // TODO: implement me!
    return 0;
}

void WheelEventInitImp::setButtons(unsigned short buttons)
{
    // TODO: implement me!
}

events::EventTarget WheelEventInitImp::getRelatedTarget()
{
    // TODO: implement me!
    return nullptr;
}

void WheelEventInitImp::setRelatedTarget(events::EventTarget relatedTarget)
{
    // TODO: implement me!
}

double WheelEventInitImp::getDeltaX()
{
    // TODO: implement me!
    return 0;
}

void WheelEventInitImp::setDeltaX(double deltaX)
{
    // TODO: implement me!
}

double WheelEventInitImp::getDeltaY()
{
    // TODO: implement me!
    return 0;
}

void WheelEventInitImp::setDeltaY(double deltaY)
{
    // TODO: implement me!
}

double WheelEventInitImp::getDeltaZ()
{
    // TODO: implement me!
    return 0;
}

void WheelEventInitImp::setDeltaZ(double deltaZ)
{
    // TODO: implement me!
}

unsigned int WheelEventInitImp::getDeltaMode()
{
    // TODO: implement me!
    return 0;
}

void WheelEventInitImp::setDeltaMode(unsigned int deltaMode)
{
    // TODO: implement me!
}

}
}
}
}
