// Generated by esidl 0.3.0.
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#include "MouseEventInitImp.h"

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{

bool MouseEventInitImp::getBubbles()
{
    // TODO: implement me!
    return 0;
}

void MouseEventInitImp::setBubbles(bool bubbles)
{
    // TODO: implement me!
}

bool MouseEventInitImp::getCancelable()
{
    // TODO: implement me!
    return 0;
}

void MouseEventInitImp::setCancelable(bool cancelable)
{
    // TODO: implement me!
}

html::Window MouseEventInitImp::getView()
{
    // TODO: implement me!
    return nullptr;
}

void MouseEventInitImp::setView(html::Window view)
{
    // TODO: implement me!
}

int MouseEventInitImp::getDetail()
{
    // TODO: implement me!
    return 0;
}

void MouseEventInitImp::setDetail(int detail)
{
    // TODO: implement me!
}

int MouseEventInitImp::getScreenX()
{
    // TODO: implement me!
    return 0;
}

void MouseEventInitImp::setScreenX(int screenX)
{
    // TODO: implement me!
}

int MouseEventInitImp::getScreenY()
{
    // TODO: implement me!
    return 0;
}

void MouseEventInitImp::setScreenY(int screenY)
{
    // TODO: implement me!
}

int MouseEventInitImp::getClientX()
{
    // TODO: implement me!
    return 0;
}

void MouseEventInitImp::setClientX(int clientX)
{
    // TODO: implement me!
}

int MouseEventInitImp::getClientY()
{
    // TODO: implement me!
    return 0;
}

void MouseEventInitImp::setClientY(int clientY)
{
    // TODO: implement me!
}

bool MouseEventInitImp::getCtrlKey()
{
    // TODO: implement me!
    return 0;
}

void MouseEventInitImp::setCtrlKey(bool ctrlKey)
{
    // TODO: implement me!
}

bool MouseEventInitImp::getShiftKey()
{
    // TODO: implement me!
    return 0;
}

void MouseEventInitImp::setShiftKey(bool shiftKey)
{
    // TODO: implement me!
}

bool MouseEventInitImp::getAltKey()
{
    // TODO: implement me!
    return 0;
}

void MouseEventInitImp::setAltKey(bool altKey)
{
    // TODO: implement me!
}

bool MouseEventInitImp::getMetaKey()
{
    // TODO: implement me!
    return 0;
}

void MouseEventInitImp::setMetaKey(bool metaKey)
{
    // TODO: implement me!
}

unsigned short MouseEventInitImp::getButton()
{
    // TODO: implement me!
    return 0;
}

void MouseEventInitImp::setButton(unsigned short button)
{
    // TODO: implement me!
}

unsigned short MouseEventInitImp::getButtons()
{
    // TODO: implement me!
    return 0;
}

void MouseEventInitImp::setButtons(unsigned short buttons)
{
    // TODO: implement me!
}

events::EventTarget MouseEventInitImp::getRelatedTarget()
{
    // TODO: implement me!
    return nullptr;
}

void MouseEventInitImp::setRelatedTarget(events::EventTarget relatedTarget)
{
    // TODO: implement me!
}

Nullable<std::u16string> MouseEventInitImp::getRegion()
{
    // TODO: implement me!
    return u"";
}

void MouseEventInitImp::setRegion(const Nullable<std::u16string>& region)
{
    // TODO: implement me!
}

}
}
}
}
